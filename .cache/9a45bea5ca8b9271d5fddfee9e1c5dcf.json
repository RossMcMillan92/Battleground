{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst CanvasImage = (url, width, height) => {\n  const image = new Image();\n\n  let hasLoaded = false;\n  image.onload = () => hasLoaded = true;\n  image.src = url;\n\n  const render = (ctx, x, y, flipped) => {\n    if (!hasLoaded) return;\n    drawImage(ctx, image, x, y, width, height, 0, flipped, false, false);\n  };\n\n  return {\n    render\n  };\n};\n\nfunction drawImage(ctx, img, x, y, width, height, deg, flip, flop, center) {\n\n  ctx.save();\n\n  if (typeof width === \"undefined\") width = img.width;\n  if (typeof height === \"undefined\") height = img.height;\n  if (typeof center === \"undefined\") center = false;\n\n  // Set rotation point to center of image, instead of top/left\n  if (center) {\n    x -= width / 2;\n    y -= height / 2;\n  }\n\n  // Set the origin to the center of the image\n  ctx.translate(x + width / 2, y + height / 2);\n\n  // Rotate the canvas around the origin\n  var rad = 2 * Math.PI - deg * Math.PI / 180;\n  ctx.rotate(rad);\n\n  let flipScale;\n  let flopScale;\n  // Flip/flop the canvas\n  if (flip) flipScale = -1;else flipScale = 1;\n  if (flop) flopScale = -1;else flopScale = 1;\n  ctx.scale(flipScale, flopScale);\n\n  // Draw the image    \n  ctx.drawImage(img, -width / 2, -height / 2, width, height);\n\n  ctx.restore();\n}\n\nexports.default = CanvasImage;"},"hash":"bb8fe0164dad307e8f71fc152b4f7714"}
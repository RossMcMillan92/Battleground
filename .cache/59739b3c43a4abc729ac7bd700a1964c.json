{"dependencies":[{"name":"./app/tools","loc":{"line":3,"column":23}},{"name":"./plugins/domready","loc":{"line":4,"column":21}},{"name":"./app/loop","loc":{"line":5,"column":17}},{"name":"./app/player","loc":{"line":6,"column":23}},{"name":"./app/enemy","loc":{"line":7,"column":22}},{"name":"./app/item","loc":{"line":8,"column":17}},{"name":"./app/keyboard","loc":{"line":9,"column":21}},{"name":"./app/background","loc":{"line":10,"column":23}},{"name":"../img/grass-texture.jpg","loc":{"line":11,"column":25}}],"generated":{"js":"\"use strict\";\n\nvar _tools = require(\"./app/tools\");\n\nvar _domready = require(\"./plugins/domready\");\n\nvar _domready2 = _interopRequireDefault(_domready);\n\nvar _loop = require(\"./app/loop\");\n\nvar _loop2 = _interopRequireDefault(_loop);\n\nvar _player = require(\"./app/player\");\n\nvar _enemy = require(\"./app/enemy\");\n\nvar _item = require(\"./app/item\");\n\nvar _item2 = _interopRequireDefault(_item);\n\nvar _keyboard = require(\"./app/keyboard\");\n\nvar _keyboard2 = _interopRequireDefault(_keyboard);\n\nvar _background = require(\"./app/background\");\n\nvar _background2 = _interopRequireDefault(_background);\n\nvar _grassTexture = require(\"../img/grass-texture.jpg\");\n\nvar _grassTexture2 = _interopRequireDefault(_grassTexture);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconsole.log(_grassTexture2.default);(function () {\n  const bg = (0, _background2.default)(_grassTexture2.default);\n  const keyboard = (0, _keyboard2.default)();\n  const masterLoop = (0, _loop2.default)();\n  const canvas = document.getElementById('canvas');\n  const ctx = canvas.getContext('2d');\n  let cw = canvas.width = canvas.offsetWidth;\n  let ch = canvas.height = canvas.offsetHeight;\n  let player = (0, _player.Player)([cw, ch]);\n  let enemy = (0, _enemy.Enemy)([cw, ch]);\n  let items = Array.from(Array(20)).map(item => (0, _item2.default)([cw, ch]));\n  let uncollidedItems = items;\n\n  // This will run on document ready\n  const init = function () {\n\n    const frame = t => {\n      let simsNeeded = _calculateSimulatioins(t);\n      let camera;\n\n      _simulate(player, enemy);\n\n      ctx.clearRect(0, 0, cw, ch);\n      ctx.save();\n      camera = _calculateCameraTranslation([0, 0], player.getPos(), cw, ch);\n      ctx.translate(...camera);\n      bg.render(ctx, [cw, ch], camera);\n      uncollidedItems.forEach(item => item.render(ctx));\n      player.render(ctx);\n      enemy.render(ctx);\n      ctx.restore();\n\n      items = uncollidedItems;\n    };\n\n    // UNPURE AS FUCK\n    const _simulate = (player, enemy) => {\n      const playerPos = player.getPos();\n      const uncollidedItemPos = uncollidedItems.length ? uncollidedItems[0].getPos() : false;\n\n      const playerToEnemyCollision = player.detectCollision(enemy.getBoundingBox());\n      const enemyToPlayerCollision = enemy.detectCollision(player.getBoundingBox());\n\n      if (playerToEnemyCollision) {\n        player.repel(playerToEnemyCollision);\n        enemy.hurt(player.getDamagePower());\n      }\n      if (enemyToPlayerCollision) {\n        enemy.repel(enemyToPlayerCollision);\n        player.hurt(enemy.getDamagePower());\n      }\n\n      uncollidedItems = items.filter(item => !item.isCollected());\n      player.updatePosition(keyboard.getState());\n      enemy.updatePosition(playerPos, uncollidedItemPos);\n\n      const playerCollectItems = uncollidedItems.filter(item => player.detectCollision(item.getBoundingBox()));\n      const enemyCollectItems = uncollidedItems.filter(item => enemy.detectCollision(item.getBoundingBox()));\n\n      player.heal(playerCollectItems.reduce((prev, cur) => prev + cur.collect(), 0));\n      enemy.heal(enemyCollectItems.reduce((prev, cur) => prev + cur.collect(), 0));\n    };\n\n    const _calculateCameraTranslation = (camera, playerPos, cw, ch) => {\n      const playerX = playerPos.x + playerPos.width / 2;\n      const playerY = playerPos.y + playerPos.height / 2;\n      let buffer = Math.min(cw, ch) * .2;\n      let [bT, bR, bB, bL] = [ch - buffer, cw - buffer, buffer, buffer].map(x => Math.round(x));\n\n      if (playerX < bL - camera[0]) camera[0] -= playerX - (bL - camera[0]);\n      if (playerX > bR - camera[0]) camera[0] -= playerX - (bR - camera[0]);\n      if (playerY < bB - camera[1]) camera[1] -= playerY - (bB - camera[1]);\n      if (playerY > bT - camera[1]) camera[1] -= playerY - (bT - camera[1]);\n\n      return camera;\n    };\n\n    const _calculateSimulatioins = (() => {\n      const fps = 60;\n      const tick = 1000 / fps;\n      let accumulator = 0;\n      let simsNeeded = 0;\n\n      return t => {\n        // calculate simulataions needed\n        accumulator += t;\n        simsNeeded = Math.floor(accumulator / tick);\n        accumulator -= simsNeeded * tick;\n        return simsNeeded;\n      };\n    })();\n\n    keyboard.start();\n\n    masterLoop.start(frame);\n  };\n\n  (0, _domready2.default)(init);\n})();"},"hash":"d4feeabacafe146947252b527d00a1f2"}
{"dependencies":[{"name":"./canvasImage.js","loc":{"line":1,"column":24}},{"name":"./health.js","loc":{"line":2,"column":23}},{"name":"./collisions","loc":{"line":3,"column":55}},{"name":"./movable","loc":{"line":10,"column":7}},{"name":"../../img/luke-main.png","loc":{"line":11,"column":27}},{"name":"../../img/luke-hurt.png","loc":{"line":12,"column":27}},{"name":"../../img/luke-dead.png","loc":{"line":13,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Player = undefined;\n\nvar _canvasImage = require(\"./canvasImage.js\");\n\nvar _canvasImage2 = _interopRequireDefault(_canvasImage);\n\nvar _health = require(\"./health.js\");\n\nvar _collisions = require(\"./collisions\");\n\nvar _movable = require(\"./movable\");\n\nvar _lukeMain = require(\"../../img/luke-main.png\");\n\nvar _lukeMain2 = _interopRequireDefault(_lukeMain);\n\nvar _lukeHurt = require(\"../../img/luke-hurt.png\");\n\nvar _lukeHurt2 = _interopRequireDefault(_lukeHurt);\n\nvar _lukeDead = require(\"../../img/luke-dead.png\");\n\nvar _lukeDead2 = _interopRequireDefault(_lukeDead);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst Player = constraints => {\n  let health = (0, _health.Health)();\n\n  const dimensions = {\n    width: 188 / 2,\n    height: 283 / 2\n  };\n  let pos = {\n    x: constraints[0] / 2,\n    y: constraints[1] / 2\n  };\n  let acceleration = {\n    x: 0,\n    y: 0\n  };\n  const velocityMap = {\n    default: 5,\n    running: 7\n  };\n  const accelStep = .025;\n  const decelStep = .05;\n\n  let damagePower = 25;\n  let isRepelling = false;\n\n  const LukeMainImg = (0, _canvasImage2.default)(_lukeMain2.default, dimensions.width, dimensions.height);\n  const LukeDeadImg = (0, _canvasImage2.default)(_lukeDead2.default, dimensions.width, dimensions.height);\n  const LukeHurtImg = (0, _canvasImage2.default)(_lukeHurt2.default, dimensions.width, dimensions.height);\n  let currentImageState = 'default';\n  const imageStates = {\n    default: LukeMainImg,\n    dead: LukeDeadImg,\n    hurt: LukeHurtImg\n  };\n\n  const updatePosition = input => {\n    const velocity = (0, _movable.calculateVelocity)(velocityMap, input);\n    const isAlive = health.getHealth() > 0;\n    let newAcceleration = acceleration;\n    let newPos;\n\n    newAcceleration = (0, _movable.calculateInputAcceleration)(acceleration, isAlive ? accelStep : 0, decelStep, input);\n    newAcceleration = (0, _movable.calculateInputDeceleration)(newAcceleration, decelStep, input);\n    newAcceleration = (0, _movable.calculateCollisionAcceleration)(newAcceleration, getPos(), constraints, isRepelling);\n    newPos = (0, _movable.calculatePos)(pos, newAcceleration, velocity);\n\n    // MUTATIONS\n    pos = newPos;\n    acceleration = newAcceleration;\n    isRepelling = false;\n  };\n\n  const repel = data => {\n    isRepelling = data;\n  };\n\n  const getDamagePower = () => damagePower;\n\n  const detectCollision = item => (0, _collisions.detectCollision)(getBoundingBox())(item);\n\n  const heal = amount => {\n    if (currentImageState === 'dead') return;\n    health.heal(amount);\n  };\n\n  let hurtStateTimeout;\n  const hurt = amount => {\n    health.hurt(amount);\n    currentImageState = 'hurt';\n\n    if (hurtStateTimeout) clearTimeout(hurtStateTimeout);\n    if (health.getHealth() === 0) {\n      currentImageState = 'dead';\n      return;\n    }\n    hurtStateTimeout = setTimeout(() => {\n      currentImageState = 'default';\n    }, 750);\n  };\n\n  const render = ctx => {\n    renderSelf(ctx);\n    health.renderHealthBar(ctx, getPos());\n  };\n\n  const renderSelf = ctx => {\n    imageStates[currentImageState].render(ctx, pos.x, pos.y, acceleration.x < 0);\n  };\n\n  const getBoundingBox = () => [pos.x, pos.x + dimensions.width, pos.y, pos.y + dimensions.height];\n\n  const getPos = () => Object.assign({}, pos, dimensions);\n\n  const output = {\n    detectCollision,\n    getBoundingBox,\n    getDamagePower,\n    heal,\n    hurt,\n    getPos,\n    repel,\n    render,\n    updatePosition\n  };\n\n  return Object.assign({}, output);\n};\n\nexports.Player = Player;"},"hash":"69079e80803640c418ba8ae238d80c97"}